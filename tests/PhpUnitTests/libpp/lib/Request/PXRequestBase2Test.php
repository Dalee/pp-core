<?php
ini_set("include_path", "../../lib/Request".PATH_SEPARATOR."../../../../../lib/Request".PATH_SEPARATOR.ini_get("include_path"));
require_once 'PHPUnit/Framework.php';

require_once 'PXRequestBase2.php';

/**
 * Test class for PXRequestBase2.
 * Generated by PHPUnit on 2009-08-13 at 12:27:51.
 */
class PXRequestBase2Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var    PXRequestBase2
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->object = new PXRequestBase2;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    function test_get_path() {
        $_SERVER['SCRIPT_NAME'] = "/test/site/wap.html";
        $this->assertEquals(array("test", "site", "wap.html"), $this->object->getPath());
    }

    function test_get_default_path() {
        $_SERVER['SCRIPT_NAME'] = "/test/site/index.jsp";
        $this->assertEquals(array("test", "site"), $this->object->getPath());
    }

    function test_get_post_http_method() {
        $_SERVER['REQUEST_METHOD'] = "POST";
        $this->assertEquals("POST", $this->object->getHttpMethod());
    }
    
    function test_get_default_http_method() {
        $_SERVER['REQUEST_METHOD'] =  NULL;
        $this->assertEquals("CLI", $this->object->getHttpMethod());
    }

    function test_get_request_uri() {
        $_SERVER['REQUEST_URI'] =  "1/2/3";
        $this->assertEquals("1/2/3", $this->object->getRequestUri());
    }

    function test_get_remote_addr_with_proxy() {
        $_SERVER['HTTP_X_REAL_IP'] =  "1.1.1.1, 2.2.2.2, 3.3.3.3";
        $this->assertEquals("1.1.1.1", $this->object->getRemoteAddr());
    }

    function test_get_remote_addr_without_proxy() {
        $_SERVER['REMOTE_ADDR'] =  "1.1.1.1";
        $this->assertEquals("1.1.1.1", $this->object->getRemoteAddr());
    }
    
    function test_get_http_host_with_proxy() {
        $_SERVER['HTTP_X_HOST'] = "test.ru, books.ru, sunporno.ru";
        $this->assertEquals("test.ru", $this->object->getHttpHost());
    }
    
    function test_get_http_host_without_proxy() {
        $_SERVER['HTTP_HOST'] = "test.ru";
        $this->assertEquals("test.ru", $this->object->getHttpHost());
    }

    function test_get_var() {
        $_REQUEST['test'] = "hello world!";
        $this->assertEquals("hello world!", $this->object->getVar("test"));
    }

    function test_get_var_default_value() {
        $this->assertEquals("teepeedee", $this->object->getVar("unknown", "teepeedee"));
    }

    function test_get_charset() {
        $_SERVER['CHARSET'] = 'UTF-8';
        $this->assertEquals("u", $this->object->getCharset());
    }

    function test_get_default_charset() {
        $_SERVER['CHARSET'] = NULL;
        $this->assertEquals("w", $this->object->getCharset());
    }
}
?>
